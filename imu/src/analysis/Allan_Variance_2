#!/usr/bin/env python3
import rosbag
import numpy as np
import matplotlib.pyplot as plt
from allantools import oadev

def read_imu_data(file_name, topic_name):
    imu_data = {'X': [], 'Y': [], 'Z': []}
    try:
        with rosbag.Bag(file_name) as bag:
            for _, msg, _ in bag.read_messages(topics=[topic_name]):
                try:
                    data_string = msg.data
                    fields = data_string.split(',')
                    x = float(fields[10])
                    y = float(fields[11])
                    z = float(fields[12].split('*')[0])
                    imu_data['X'].append(x)
                    imu_data['Y'].append(y)
                    imu_data['Z'].append(z)
                except ValueError:
                    continue
    except Exception as e:
        print(f"Error reading bag file: {e}")
    return imu_data

def plot_allan_variance(imu_data, label):
    taus, adevs, _, _ = oadev(imu_data, data_type='freq', taus='all')
    plt.loglog(taus, adevs, label=label)


def calculate_parameters(taus, adevs):
    N = adevs[np.argmin(np.abs(taus - 1))]  
    B = np.min(adevs)  
    K_index = np.argmax(taus > 3 * B)  
    K = adevs[K_index] if K_index < len(adevs) else None
    return K, N, B

def display_mean_values(imu_data):
    mean_values = {axis: np.mean(data) for axis, data in imu_data.items()}
    return mean_values

def main():
    file_name = '/home/karthikkoduru1/Downloads/LocationC.bag'
    topic_name = '/vectornav'
    imu_data = read_imu_data(file_name, topic_name)
    mean_values = display_mean_values(imu_data)

    plt.figure(figsize=(12, 10))
    plot_labels = []
    for axis, data in imu_data.items():
        if data:
            plot_allan_variance(data, f'Gyro Data {axis}')
            plot_labels.append(axis)

    plt.xlabel('Tau [s]')
    plt.ylabel('Allan Deviation [units]')
    plt.title('Allan Variance Analysis')
    plt.grid(True)
    plt.legend(plot_labels)

    plt.text(0.1, 0.8, f'Mean Values (rad/s): X={mean_values["X"]:.2e}, Y={mean_values["Y"]:.2e}, Z={mean_values["Z"]:.2e}', fontsize=12)
    for i, axis in enumerate(['X', 'Y', 'Z']):
        if axis in imu_data:
            taus, adevs = oadev(imu_data[axis], data_type='freq', taus='all')
            K, N, B = calculate_parameters(taus, adevs)
            plt.text(0.1, 0.6 - 0.1 * i, f'{axis}: K={K:.2e}, N={N:.2e}, B={B:.2e}', fontsize=12)

    plt.text(0.1, 0.1, f'Total Data Points: X={len(imu_data["X"])}, Y={len(imu_data["Y"])}, Z={len(imu_data["Z"])}', fontsize=12)

    plt.show()

if __name__ == '__main__':
    main()
